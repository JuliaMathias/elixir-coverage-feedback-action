name: "Elixir Coverage Partitioned"
description: "Action to run tests, check coverage, and send a feedback message to the pull request."

branding:
  icon: "message-square"
  color: "purple"

inputs:
  github_token:
    description: "GitHub token"
    required: true
  coverage_tool:
    description: "Coverage tool"
    default: "default"
    required: false
  coverage_threshold:
    description: "Coverage threshold"
    default: 90
    required: false
  partition_count:
    description: "Partition Count"
    default: 6
    required: false
  working_directory:
    description: "Working directory"
    default: "."
    required: false
  elasticsearch_major_version:
    description: "Elasticsearch Major Version"
    required: true
  database_url:
    description: "Database URL"
    required: true
  mix_test_partition:
    description: "Mix test partition"
    default: 6
    required: true

runs:
  using: "composite"
  steps:
    - name: Running Tests
      id: tests
      shell: bash
      env:
        ELASTICSEARCH_MAJOR_VERSION: ${{ inputs.elasticsearch_major_version }}
        ELASTICSEARCH_CLUSTER_0_MAJOR_VERSION: ${{ inputs.elasticsearch_major_version }}
        ELASTICSEARCH_CLUSTER_1_MAJOR_VERSION: ${{ inputs.elasticsearch_major_version }}
        DATABASE_URL: ${{ inputs.database_url }}
        MIX_TEST_PARTITION: ${{ inputs.mix_test_partition }}
      run: |
        cd ${{ inputs.working_directory }}
        mix test --cover --max-cases=1 --warnings-as-errors --partitions ${{ inputs.partition_count}}

    - name: Coverage
      id: coverage
      if: ${{ inputs.mix_test_partition }} == 1
      shell: bash
      run: |
        cd ${{ inputs.working_directory }}
        if mix test.coverage 2>&1 | tee coverage_report.log; then echo 'success running the tests'; fi

    - name: Feedback comment
      if: ${{ inputs.mix_test_partition }} == 1
      uses: actions/github-script@v6.4.1
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const actionPath = '${{ github.action_path }}';
          const coverageTool = '${{ inputs.coverage_tool }}'.toLowerCase();
          const actor = '${{ github.actor }}';

          const script = require(`${actionPath}/main.js`);
          await script({
            core,
            actor,
            github,
            context,
            coverageTool,
            coverageThreshold: ${{ inputs.coverage_threshold }},
            workingDirectory: '${{ inputs.working_directory }}',
          });
